import jinja2
import os
import json
from utils import unique,flatten
from mutations import MutationFasta

class CodeGenerator(object):

    def __init__(self):
        self.template_dir = os.path.join(os.path.dirname(__file__), 'templates')
        self.jinja_env = jinja2.Environment(loader = jinja2.FileSystemLoader(self.template_dir),
                               autoescape = False)        
       
    def render_str(self, template, **params):
        try:
            t = self.jinja_env.get_template(template)
        except AttributeError:
            return None
        selfer = self
        return t.render(params,selfer = selfer)

    def load_gene_enum_to_drug_name(self):
        with open('data/%s/gene_to_drug.json'  % self.species ,'r') as infile:
            d =  json.load(infile)
        return d          



class StaphCodeGenerator(CodeGenerator):

    def __init__(self):
        self.species = "staph"
        self.gene_enum_to_drug_name = self.load_gene_enum_to_drug_name()
        self.template_dir = os.path.join(os.path.dirname(__file__), 'templates/src/predictor/staph')
        self.render_dir = os.path.join(os.path.dirname(__file__), 'render/src/predictor/staph')

        self.jinja_env = jinja2.Environment(loader = jinja2.FileSystemLoader(self.template_dir),
                               autoescape = False)
    @property 
    def genes(self):
        return self.gene_enum_to_drug_name.keys()

    @property 
    def drugs(self):
        return [DrugCodeGenerator(drug) for drug in unique(flatten(self.gene_enum_to_drug_name.values())) ]                        

    def render_antibiotics(self):
        return self.render_str('antibiotics.c')

    def render_and_write_antibiotics(self):
        st = self.render_antibiotics()
        with open(os.path.join(self.render_dir,'antibiotics.c'),'w') as outfile:
            outfile.write(st)

    def render_and_write_all(self):
        self.render_and_write_antibiotics() 



class DrugCodeGenerator(CodeGenerator):

    def __init__(self,name):
        self.name = name
        self.gene_enum_to_drug_name = self.load_gene_enum_to_drug_name()
        self.mutation_fasta = MutationFasta('../data/staph/antibiotics/%s' % self.name.lower() )

    def __str__(self):
        return self.name   

    @property
    def genes_resistance_induced_by(self):
        genes = []
        for gene,drugs in self.gene_enum_to_drug_name.iteritems():
            if self.name in drugs:
                genes.append(StaphGene(gene))
        return genes 

    @property 
    def has_epistatic_muts(self):
        if self.name in ['FusidicAcid','Rifampicin']:
            return True
        else:
            return False

    @property 
    def epistaic_file_path(self):
        return os.path.join(self.template_dir,'epistatic',self.name)

    @property 
    def num_mutations(self):
        return self.mutation_fasta.num_mutations

    @property 
    def first_mut(self):
        return self.mutation_fasta.first_mut

    @property 
    def last_mut(self):
        return self.mutation_fasta.last_mut                

    @property 
    def num_genes(self):
        return len(self.genes_resistance_induced_by)                   

class StaphDrugCodeGenerator(DrugCodeGenerator):
    
    def __init__(self,name):
        self.species = "staph"
        super(StaphDrugCodeGenerator, self).__init__(name)            
        

class GeneCodeGenerator(CodeGenerator):

    def __init__(self,name):
        self.name = name 
        self.gene_enum_to_drug_name = self.load_gene_enum_to_drug_name()

    def __str__(self):
        return self.name     

        
class StaphGene(GeneCodeGenerator):
    
    def __init__(self,name):
        self.species = "staph" 
        super(StaphGene, self).__init__(name=name)                    
                               


cg = StaphCodeGenerator()
cg.render_and_write_all()
# print cg.render_map_gene_to_drug_resistance()
# print cg.render_antibiotics()
# print cg.is_drug_susceptible(drug="Gentamicin")
# print cg.is_drug_susceptible(drug="FusidicAcid")