#! /usr/bin/env python
from pynteractive import PhyloTree

import time
import json
import pickle
from treeplacing import Node
from treeplacing import Leaf
from treeplacing import Placer
from mongoengine import connect
import argparse
parser = argparse.ArgumentParser(description='Genotype a sample based on kmer coverage on alleles')
parser.add_argument('sample', metavar='sample', type=str, help='sample id')
parser.add_argument('--db_name', metavar='db_name', type=str, help='db_name', default="tb")
parser.add_argument('--kmer', metavar='kmer', type=int, help='kmer size', default = 31)
args = parser.parse_args()

connect('atlas-%s-%i' % (args.db_name ,args.kmer))

start = time.clock()

# with open ("der_tree.json", 'r') as infile:
#     tree = json.load(infile)

# def walk(node):
#     children = []
#     for child in node['children']:
#         if child["type"] == "node":
#             childrens = walk(child)
#             children.append(Node(children = childrens))
#         else:
#             children.append(Leaf(child["name"]))
#     return children

# root = Node(children = walk(tree))

# pickle.dump( root, open( "root.p", "wb" ) ) 
a=PhyloTree()
a.setData('(C00005468:4.021312762e-05,(((4139-04:9.37121426e-05,5870-03:8.827310742e-05):9.956839063e-05,(C00005285:3.587030861e-06,C00005489:5.85948404e-06):0.0002224295046):4.289697618e-05,(((C00005428:6.936865384e-05,C00003751:7.402859059e-05):1.697204558e-05,C00005480:8.945607252e-05):0.0001299700113,((C00005482:0.0001274577325,(C00007313:6.440547685e-05,((((C00007304:8.41338148e-06,C00007316:9.755959626e-06):3.26947207e-06,C00007309:9.584941603e-06):2.623858107e-05,C00005417:3.30999873e-05):9.014260442e-06,(C00007270:4.790177667e-05,(((((C00005265:2.452104053e-06,C00005476:1.634736035e-06):3.26947207e-06,C00007318:3.26947207e-06):3.971612182e-05,(C00003753:1.73635609e-05,C00003754:1.843500123e-05):1.387291567e-05):3.245909993e-06,((((C00003819:1.382932646e-06,(C00005304:2.452104053e-06,(C00003790:1.634736035e-06,C00005475:8.173680175e-07):8.173680175e-07):8.173680175e-07):8.173680175e-07,((C00005308:3.26947207e-06,C00005307:8.173680175e-07):8.173680175e-07,C00005449:8.173680175e-07):1.634736035e-06):1.265529142e-05,C00003822:1.127774546e-05):3.221119452e-06,(C00003820:4.733134208e-06,((C00003763:4.086840088e-06,(C00005401:8.173680175e-07,C00005402:8.173680175e-07):8.173680175e-07):8.173680175e-07,((C00005382:8.173680175e-07,(C00005380:8.173680175e-07,C00003837:8.173680175e-07):4.086840088e-06):1.634736035e-06,C00003838:8.173680175e-07):8.173680175e-07):7.922787816e-06):9.625643372e-06):2.27358551e-05):3.765172776e-06,(C00003803:2.588408908e-05,C00005346:2.801084002e-05):1.758052566e-05):2.221634899e-06):7.842702611e-06):2.024373944e-05):6.557528612e-05):1.351313512e-05,(((5872-03:5.950065402e-05,11097-03:6.744549306e-05):5.89980279e-06,((4781-04:2.703042336e-05,(C00005408:2.784501369e-05,C00005509:3.176910506e-05):4.424860089e-06):3.795260882e-05,((((C00003795:2.687003166e-05,(C00005515:1.634736035e-06,C00005274:2.452104053e-06):2.396476085e-05):6.673219444e-06,((C00003797:8.173680175e-07,(C00005279:8.173680175e-07,(C00005506:9.215495069e-07,(C00005280:8.173680175e-07,C00005458:1.634736035e-06):4.086840088e-06):4.086840088e-06):8.173680175e-07):8.173680175e-07,C00003840:2.452104053e-06):2.801087237e-05):1.646641879e-05,(((C00005333:4.086840088e-06,((C00005387:8.173680175e-07,C00005386:1.634736035e-06):4.086840088e-06,(C00005319:3.26947207e-06,(C00003786:1.634736035e-06,C00005320:2.452104053e-06):2.452104053e-06):8.966753954e-06):2.452104053e-06):8.173680175e-07,C00003766:3.26947207e-06):2.78107462e-05,3156-04:2.794777273e-05):2.977246628e-05):9.891874452e-06,(C00005400:8.173680175e-07,C00005399:8.173680175e-07):6.30486317e-05):5.521343166e-06):8.173680175e-07):2.098355337e-05,((C00007286:7.592004899e-05,(((10348-03:2.052354244e-05,((C00005267:8.173680175e-07,C00003800:8.173680175e-07):1.288731695e-05,(C00005406:1.961615066e-05,C00005420:2.082414948e-05):8.173680175e-07):6.871108567e-06):2.58887247e-05,((C00005429:2.753071447e-05,C00007278:3.423776682e-05):5.880131427e-06,(4523-03:2.19468241e-05,(C00003782:8.173680175e-07,C00003781:8.173680175e-07):2.833594479e-05):6.643950133e-06):1.875104818e-05):3.130452698e-05,((3497-04:4.687128523e-05,(C00005488:4.796525732e-05,(C00005423:3.170010282e-05,(C00005292:3.287993344e-05,((C00007267:1.718827181e-05,(((((((C00000574:3.26947207e-06,(C00003834:1.634736035e-06,C00005414:2.452104053e-06):8.173680175e-07):3.26947207e-06,(C00005294:1.634736035e-06,C00007298:1.634736035e-06):4.086840088e-06):1.634736035e-06,C00007299:8.173680175e-07):8.173680175e-07,C00007294:1.634736035e-06):5.721576123e-06,C00005461:1.634736035e-06):8.173680175e-07,C00005460:8.173680175e-07):8.173680175e-07,C00003835:4.086840088e-06):1.595496576e-05):1.411457403e-05,(C00005551:2.452104053e-06,C00005543:1.634736035e-06):3.59454508e-05):4.370584144e-06):8.173680175e-07):1.069162805e-05):2.572179673e-06):3.177560225e-05,(C00005373:4.716367865e-05,(4783-04:2.019396142e-05,3734-04:2.011818433e-05):3.774198794e-05):1.412084715e-05):5.290823737e-06):8.173680175e-07):1.370058795e-05,(C00007301:3.618184099e-05,(C00000577:8.173680175e-07,C00003815:4.086840088e-06):4.645397845e-05):4.573593449e-05):8.173680175e-07):3.761104136e-05):6.796791569e-05):1.749012864e-05):0.0001723544522)')
a.view()

root = pickle.load( open( "root.p", "rb" ) )

neighbours = Placer(root).place(args.sample)
if type(neighbours) is list:
	print "Nearest Neighbours are %s" % ",".join(neighbours)
else:
	print "Nearest Neighbour is found to be %s - correct!" % neighbours
print "Time taken to search %s seconds " % str((time.clock() - start))
a.markClade(neighbours,'red')

while True:
    time.sleep(10)